image: docker:latest

services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay2
stages: 
  - lint
  - build
  - deploy
  - deploy-master
  - deploy-development
before_script:
  - apk add --no-cache --virtual build-dependencies python make g++ curl yarn
  - yarn add node-gyp
  - docker login -u _ -p "$HEROKU_TOKEN" $HEROKU_REGISTRY

lint:
  stage: lint
  script:
    - yarn add tslint
    - yarn run lint

build:
  stage: build
  script:
    - yarn add typescript
    - yarn run build

deploy:
  stage: deploy
  except:
    - master
    - development
  script:
    - export REGISTRY_IMAGE="$HEROKU_REGISTRY/$HEROKU_APP_ID/web"
    - docker build -f docker/Dockerfile-dev --iidfile imageid.txt -t $REGISTRY_IMAGE .
    - docker push $REGISTRY_IMAGE
  after_script:
    - chmod +x imageid.txt
    - echo "Docker Image ID is $(cat imageid.txt)"
    - chmod +x ./scripts/deploy.sh
    - ./scripts/deploy.sh Heroku ${HEROKU_APP_ID} ${HEROKU_TOKEN}
  when: manual

deploy-development:
  stage: deploy-development
  only:
    - development
  script:
    - export REGISTRY_IMAGE="$HEROKU_REGISTRY/$HEROKU_DEV_APP_ID/web"
    - docker build --pull -f docker/Dockerfile-dev --iidfile imageid.txt -t $REGISTRY_IMAGE .
    - docker push $REGISTRY_IMAGE
  after_script:
    - chmod +x imageid.txt
    - echo "Docker Image ID is $(cat imageid.txt)"
    - chmod +x ./scripts/deploy.sh
    - ./scripts/deploy.sh Heroku ${HEROKU_DEV_APP_ID} ${HEROKU_TOKEN}

deploy-master:
  stage: deploy-master
  only:
    - master
  script:
    - export REGISTRY_IMAGE="$HEROKU_REGISTRY/$HEROKU_PROD_APP_ID/web"
    - docker build --pull -f docker/Dockerfile-prod --iidfile imageid.txt -t $REGISTRY_IMAGE .
    - docker push $REGISTRY_IMAGE
  after_script:
    - chmod +x imageid.txt
    - echo "Docker Image ID is $(cat imageid.txt)"
    - chmod +x ./scripts/deploy.sh
    - ./scripts/deploy.sh Heroku ${HEROKU_PROD_APP_ID} ${HEROKU_TOKEN}
  when: manual